---
title: "BEE 4750/5750 Homework 0"
author: "Katerina Tang (kbt28)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
  term: true
  results: tex
  cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

# Problem 1

## Problem 1.1
```julia
function square_number(x)
    output = x.^2
    return output
end
```

## Problem 1.2
If $x = 5,$ then $x^2 =$ `j square_number(5)`.

## Problem 1.3
```julia
x = LinRange(-10, 10, 100)
y = square_number(x)
plot(x, y, xlabel="x", ylabel="y = x^2", legend=false)
```

# Problem 2

## Problem 2.1
If $a\leq\sqrt{x},$ then 

$$\frac{x}{a} \geq \frac{x}{\sqrt{x}} = \sqrt{x}.$$ 

If $a > \sqrt{x},$ then 

$$\frac{x}{a} < \frac{x}{\sqrt{x}} = \sqrt{x}.$$

In both cases, $a \leq \sqrt{x} \leq \frac{x}{a}.$

## Problem 2.2
```julia
function newton_sqrt(x, err_tol)
    a = x

    while true
        root = 0.5 * (a + (x/a))
        if abs(root - a) < err_tol
            return root
        end
        a = root
    end
end
```
Using this method and an error tolerance of $10^{-8}$ gives $\sqrt{2}\approx$ `j newton_sqrt(2, 1e-8)`.

# Problem 3

## Problem 3.1
```julia
a = rand(20)
```

## Problem 3.2
```julia
function mean(vect)
    sum = 0

    for i in 1:length(vect)
        sum += vect[i]
    end

    return sum/length(vect)
end

function demean(vect)
    return vect .- mean(vect)
end
```
We can test this with our random vector from part (1).
```julia
mean(a)
```
```julia
demean(a)
```

## Problem 3.3
```julia
b = zeros(10)
b[3:8] .= 1.0
b
```

## Problem 3.4
```julia
A = rand(5, 5)
```
```julia
for i in 1:5
    A[:, i] .-= mean(A[:, i])
end
```

# Problem 4

## Problem 4.1

## Problem 4.2

## Problem 4.3

# References