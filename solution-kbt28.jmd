---
title: "BEE 4750/5750 Homework 0"
author: "Katerina Tang (kbt28)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
  term: true
  results: tex
  cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()

using Plots
using Distributions
```

# Problem 1

## Problem 1.1
Here's a function to compute the square of a number:
```julia
function square_number(x)
    output = x.^2
    return output
end
```

## Problem 1.2
If $x = 5,$ then $x^2 =$ `j square_number(5)`.

## Problem 1.3
```julia
x = LinRange(-10, 10, 100)
y = square_number(x)
plot(x, y, xlabel="x", ylabel="y = x^2", label="y=x^2")
```

# Problem 2

## Problem 2.1
If $a\leq\sqrt{x},$ then 

$$\frac{x}{a} \geq \frac{x}{\sqrt{x}} = \sqrt{x}.$$ 

If $a > \sqrt{x},$ then 

$$\frac{x}{a} < \frac{x}{\sqrt{x}} = \sqrt{x}.$$

In both cases, $a \leq \sqrt{x} \leq \frac{x}{a}.$

## Problem 2.2
```julia
function newton_sqrt(x, err_tol)
    a = x

    while true
        root = 0.5 * (a + (x/a))
        if abs(root - a) < err_tol
            return root
        end
        a = root
    end
end
```
Using this method and an error tolerance of $10^{-8}$ gives $\sqrt{2}\approx$ `j newton_sqrt(2, 1e-8)`.

# Problem 3

## Problem 3.1
Here's a random vector of length 20:
```julia
a = rand(20)
```

## Problem 3.2
```julia
function mean(vect)
    sum = 0

    for i in 1:length(vect)
        sum += vect[i]
    end

    return sum/length(vect)
end

function demean(vect)
    return vect .- mean(vect)
end
```

We can test these functions with our random vector from part (1).

```julia
mean(a)
```

```julia
demean(a)
```

## Problem 3.3
Here's a vector of 10 elements where the center 6 elements are equal to 1 and the rest are equal to 0:
```julia
b = zeros(10);
b[3:8] .= 1.0;
b
```

## Problem 3.4
Here's a random 5x5 matrix:
```julia
A = rand(5, 5)
```
Here's that matrix after subtracting the mean of each column from that column:
```julia
for i in 1:5
    A[:, i] .-= mean(A[:, i])
end

A
```

# Problem 4

## Problem 4.1
Here are 100 samples from a log-normal distribution with log-mean $\mu=\log(0.03)$ and standard deviation $\sigma=0.005.$
```julia
d = LogNormal(log(0.03), 0.005)
y = rand(d, 100)
```

## Problem 4.2
Here's a function that simulates the lake phosphorous dynamics:
```julia
function P_levels(a, y, b, q, T, X0)
    X = zeros(T)
    X[1] = X0

    for i in 2:T
        X[i] = X[i-1] + a + y[i] + X[i-1]^q / (1+ X[i-1]^q) - b*X[i-1]
    end
    
    return X
end
```

## Problem 4.3
```julia
X = P_levels(0.4, y, 0.42, 2.0, 100, 1.0)
plot(X, xlabel = "Time (years)", ylabel="P level", legend = false)
```

The above plot shows the lake phosphorous levels approaching an asymptote, i.e., reaching a stable equilibrium, relatively rapidly.
I found that the P levels reached this equilibrium regardless of the initial concentration $X_0.$
For example, the P levels starting with $X_0=4.0$ are plotted below; we see that the P levels fall until we reach the equilibrium level, approximately 3.2.

```julia
X = P_levels(0.4, y, 0.42, 2, 100, 4.0)
plot(X, xlabel = "Time (years)", ylabel="P level", legend = false)
```

# References